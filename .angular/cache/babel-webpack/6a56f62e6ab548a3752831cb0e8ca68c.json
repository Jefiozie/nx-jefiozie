{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/material/toolbar\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\n\nfunction ToolbarComponent_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function ToolbarComponent_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.toggleNav();\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.navOpend ? \"close\" : \"menu\");\n  }\n}\n\nexport let ToolbarComponent = /*#__PURE__*/(() => {\n  class ToolbarComponent {\n    constructor(breakpointObserver) {\n      this.breakpointObserver = breakpointObserver;\n      this.toggle = new EventEmitter();\n      this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n    }\n\n    toggleNav() {\n      this.toggle.emit();\n    }\n\n  }\n\n  ToolbarComponent.ɵfac = function ToolbarComponent_Factory(t) {\n    return new (t || ToolbarComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n  };\n\n  ToolbarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ToolbarComponent,\n    selectors: [[\"jbb-toolbar\"]],\n    inputs: {\n      navOpend: \"navOpend\"\n    },\n    outputs: {\n      toggle: \"toggle\"\n    },\n    decls: 8,\n    vars: 3,\n    consts: [[\"color\", \"primary\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"mat-mini-fab\", \"\", \"href\", \"./assets/rss.xml\", \"target\", \"_blank\", 1, \"icon-right\"], [\"aria-label\", \"Rss feed link\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\"], [\"aria-label\", \"Side nav toggle icon\"]],\n    template: function ToolbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\", 0);\n        i0.ɵɵtemplate(1, ToolbarComponent_button_1_Template, 3, 1, \"button\", 1);\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵelementStart(3, \"span\");\n        i0.ɵɵtext(4, \" A blog by Jeffrey | (@jefiozie)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"a\", 2);\n        i0.ɵɵelementStart(6, \"mat-icon\", 3);\n        i0.ɵɵtext(7, \"rss_feed\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx.isHandset$));\n      }\n    },\n    directives: [i2.MatToolbar, i3.NgIf, i4.MatAnchor, i5.MatIcon, i4.MatButton],\n    pipes: [i3.AsyncPipe],\n    styles: [\".icon-right[_ngcontent-%COMP%]{position:absolute;right:0;margin-right:1rem;cursor:pointer}.icon-right[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{color:#fff}span[_ngcontent-%COMP%]{color:#fff}@media screen and (max-width: 600px){.icon-right[_ngcontent-%COMP%]{visibility:hidden}}\"]\n  });\n  return ToolbarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}